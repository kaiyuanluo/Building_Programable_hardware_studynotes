#ifndef _DRIVER_I2C_H
#define _DRIVER_I2C_H

#include "stm32f1xx_hal.h"

// 定义SCL和SDA的端口
#define SCL_PORT  GPIOF
#define SDA_PORT  GPIOF

// 定义SCL和SDA的高低电平操作
#define SCL_H  HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET)   // SCL high
#define SCL_L  HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET) // SCL low

#define SDA_H  HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET)   // SDA high
#define SDA_L  HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_RESET) // SDA low
#define SDA_IN  HAL_GPIO_ReadPin(SDA_PORT, SDA_PIN)                 // Read SDA

// 外部函数声明
extern void I2C_GPIO_Reinit(void);
extern void I2C_Start(void);
extern void I2C_Stop(void);
extern int I2C_GetAck(void);
extern void I2C_ACK(void);
extern void I2C_NACK(void);
extern void I2C_WriteByte(uint8_t data);
extern uint8_t I2C_ReadByte(uint8_t ack);

#endif /* _DRIVER_I2C_H */

#include "IIC_driver.h"

// 重新初始化I2C GPIO
void I2C_GPIO_Reinit(void) {
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    __HAL_RCC_GPIOF_CLK_ENABLE();
    HAL_GPIO_DeInit(SCL_PORT, SCL_PIN);
    HAL_GPIO_DeInit(SDA_PORT, SDA_PIN);

    // 设置为开漏输出模式，速度为高
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;

    // 初始化SCL
    GPIO_InitStruct.Pin = SCL_PIN;
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct);

    // 初始化SDA
    GPIO_InitStruct.Pin = SDA_PIN;
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStruct);
}

// I2C开始信号
void I2C_Start(void) {
    SCL_H;
    SDA_H;
    HAL_Delay(1);
    SDA_L;
    HAL_Delay(1);
}

// I2C停止信号
void I2C_Stop(void) {
    SDA_L;
    SCL_H;
    HAL_Delay(1);
    SDA_H;
    HAL_Delay(1);
}

// 获取I2C应答
int I2C_GetAck(void) {
    int i = 0;
    SDA_H;
    SCL_L;
    HAL_Delay(1);
    SCL_H;
    while (SDA_IN != 0) {
        i++;
        if (i == 1000) {
            SCL_L;
            return -1;
        }
    }
    SCL_L;
    return 0;
}

// 发送I2C应答信号
void I2C_ACK(void) {
    SCL_L;
    SDA_L;
    HAL_Delay(1);
    SCL_H;
    HAL_Delay(1);
}

// 发送I2C非应答信号
void I2C_NACK(void) {
    SCL_L;
    SDA_H;
    HAL_Delay(1);
    SCL_H;
    HAL_Delay(1);
}

// 写一个字节到I2C
void I2C_WriteByte(uint8_t data) {
    uint8_t i = 0;
    for (i = 0; i < 8; i++) {
        SCL_L;
        HAL_Delay(1);
        if (data & 0x80) {
            SDA_H;
        } else {
            SDA_L;
        }
        data <<= 1;
        SCL_H;
        HAL_Delay(1);
    }
    I2C_GetAck();
}

// 从I2C读取一个字节
uint8_t I2C_ReadByte(uint8_t ack) {
    uint8_t i = 0, data = 0;
    SDA_H;
    for (i = 0; i < 8; i++) {
        SCL_L;
        HAL_Delay(1);
        SCL_H;
        data <<= 1;
        if (SDA_IN) {
            data |= 1;
        }
        HAL_Delay(1);
    }
    if (ack == 0) {
        I2C_ACK();
    } else {
        I2C_NACK();
    }
    return data;
}
